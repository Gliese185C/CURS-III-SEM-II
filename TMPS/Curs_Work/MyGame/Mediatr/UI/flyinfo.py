# -*- coding: utf-8 -*-
import random

import pandas as pd
# Form implementation generated from reading ui file 'flyinfo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Mediatr import flyinfo_cl
from datetime import datetime, timedelta



class Ui_MainWindow(object):

    def __init__(self):
        self.window = None
        self.verified_fly = []
        self.fly = []
        self.df_city = pd.read_csv('C:\\Users\\User\\Desktop\\MyGame\\flyinfo_data\\city_county.csv')
        self.df_names = pd.read_csv('C:\\Users\\User\\Desktop\\MyGame\\flyinfo_data\\names_prep.csv')
    def setupUi(self, MainWindow, window):
        self.window = window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 668)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.searchBT = QtWidgets.QPushButton(self.centralwidget)
        self.searchBT.setGeometry(QtCore.QRect(190, 70, 121, 41))
        self.searchBT.setObjectName("searchBT")
        self.planeNumber = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.planeNumber.setGeometry(QtCore.QRect(0, 0, 501, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.planeNumber.setFont(font)
        self.planeNumber.setObjectName("planeNumber")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(0, 130, 501, 561))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setObjectName("plainTextEdit")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.searchBT.clicked.connect(self.search_info_fly)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.searchBT.setText(_translate("MainWindow", "Search"))
        self.planeNumber.setPlaceholderText(_translate("MainWindow", "enter the number of plane"))



    def search_info_fly(self):
        type_p = self.planeNumber.toPlainText()
        self.state_s = "Search"
        for plane in self.window.area_planes:
            if plane.air_type == type_p:
                if plane.air_type not in self.verified_fly:
                    if not plane.status:
                        fly = flyinfo_cl.FlightInfo(plane)
                        fly.departure_date = datetime.now() + timedelta(hours=random.randint(-6,-2))
                        fly.departure_city = self.df_city.iloc[random.randint(0,len(self.df_city))]['city_ascii']
                        fly.city_of_arrival = self.df_city.iloc[random.randint(0, len(self.df_city))]['city_ascii']
                        fly.number_of_passengers = random.randint(30,70)
                        fly.first_pilot = fly.plane.first_pilot
                        fly.second_pilot = fly.plane.second_pilot
                        bad_n = random.randint(1,5)
                        if bad_n == 1:
                            fly.departure_date = datetime.now() + timedelta(hours=random.randint(1,10))
                        elif bad_n == 2:
                            nr = random.randint(0, len(self.df_city) - 1)
                            fly.departure_city = self.df_city.iloc[nr]['city_ascii']
                            fly.city_of_arrival = fly.departure_city
                        elif bad_n == 3:
                            fly.number_of_passengers = random.randint(50,180)
                        elif bad_n == 4:
                            nr = random.randint(0, len(self.df_names) - 1)
                            fly.first_pilot = self.df_names.iloc[nr]['First Name'] + ' ' + self.df_names.iloc[nr]['Last Name']
                        elif bad_n == 5:
                            nr = random.randint(0, len(self.df_names) - 1)
                            fly.second_pilot = self.df_names.iloc[nr]['First Name'] + ' ' + self.df_names.iloc[nr]['Last Name']
                        self.fly.append(fly)
                        self.verified_fly.append(fly.plane.air_type)
                        self.plainTextEdit.setPlainText(fly.get_info())
                        self.state_s = "Found"
                    else:
                        fly = flyinfo_cl.FlightInfo(plane)
                        fly.departure_date = datetime.now() + timedelta(hours=random.randint(-6, -2))
                        fly.departure_city = self.df_city.iloc[random.randint(0, len(self.df_city))]['city_ascii']
                        fly.city_of_arrival = self.df_city.iloc[random.randint(0, len(self.df_city))]['city_ascii']
                        fly.number_of_passengers = random.randint(30, 70)
                        fly.first_pilot = fly.plane.first_pilot
                        fly.second_pilot = fly.plane.second_pilot
                        self.fly.append(fly)
                        self.verified_fly.append(fly.plane.air_type)
                        self.plainTextEdit.setPlainText(fly.get_info())
                        self.state_s = "Found"
                else:
                    for item in self.fly:
                        if item.air_type == type_p:
                            self.plainTextEdit.setPlainText(item.get_info())
                            self.state_s = "Found"
                            break
            if self.state_s == "Search":
                self.plainTextEdit.setPlainText("Nothing was found")